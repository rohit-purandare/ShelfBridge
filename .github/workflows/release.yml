# Release Management
# Automated versioning, changelog generation, and Docker image publishing
name: Release

on:
  push:
    branches: [main]

jobs:
  # Release Please handles versioning and changelog generation
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for semantic versioning

      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Build and publish Docker images when a release is created
  docker-publish:
    name: Build & Publish Docker Images
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}
          fetch-depth: 1 # Shallow clone for performance

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/shelfbridge
          tags: |
            # Semantic versioning using release-please outputs
            type=semver,pattern=v{{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern=v{{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            # Latest tag for releases
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=ShelfBridge
            org.opencontainers.image.description=Personal book collection management system
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push multi-arch Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/shelfbridge
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Verify published images
        run: |
          echo "üîç Verifying published Docker images..."
          sleep 15  # Allow time for registry propagation

          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pulling and testing: $tag"
              if docker pull "$tag"; then
                docker run --rm --entrypoint="" "$tag" node --version
                docker run --rm --entrypoint="" "$tag" ls src/main.js
                echo "‚úÖ Verified: $tag"
              else
                echo "‚ùå Failed to pull: $tag"
                exit 1
              fi
            fi
          done

  # Post-release notification
  release-notification:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [release-please, docker-publish]
    if: needs.release-please.outputs.release_created == 'true'

    steps:
      - name: Display release summary
        run: |
          echo "üéâ Release ${{ needs.release-please.outputs.tag_name }} Published Successfully!"
          echo ""
          echo "üìã Release Details:"
          echo "  ‚Ä¢ Version: ${{ needs.release-please.outputs.version }}"
          echo "  ‚Ä¢ Tag: ${{ needs.release-please.outputs.tag_name }}"
          echo "  ‚Ä¢ Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }}"
          echo ""
          echo "üê≥ Docker Images Published:"
          echo "  ‚Ä¢ Image Digest: ${{ needs.docker-publish.outputs.digest }}"
          echo "  ‚Ä¢ Generated Tags:"
          echo "${{ needs.docker-publish.outputs.tags }}" | sed 's/^/    ‚Ä¢ /'
          echo ""
          echo "üèóÔ∏è Multi-architecture support: linux/amd64, linux/arm64"
          echo ""
          echo "üì¶ Usage:"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/shelfbridge:latest"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/shelfbridge:${{ needs.release-please.outputs.version }}"
