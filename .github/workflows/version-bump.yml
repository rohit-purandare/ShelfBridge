name: Auto Version Bump

on:
  push:
    branches: [ main ]
    # Don't run if this is already a version bump commit
    paths-ignore: [ 'package.json', 'package-lock.json' ]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    # Skip if commit message already contains version bump indicators
    if: ${{ !contains(github.event.head_commit.message, 'bump version to v') }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        # Need a token with write permissions to push back to repo
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine version bump type
      id: bump_type
      run: |
        # Check commit message for conventional commit patterns
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if echo "$COMMIT_MSG" | grep -E "^(feat|feature)(\(.+\))?!?:" > /dev/null; then
          echo "type=minor" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MSG" | grep -E "^(fix|bug)(\(.+\))?!?:" > /dev/null; then
          echo "type=patch" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MSG" | grep -E "BREAKING CHANGE" > /dev/null; then
          echo "type=major" >> $GITHUB_OUTPUT
        else
          # Default to patch for any other commits
          echo "type=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      run: |
        npm version ${{ steps.bump_type.outputs.type }} --no-git-tag-version
        echo "New version: $(node -p "require('./package.json').version")"
    
    - name: Commit version bump
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        git add package.json package-lock.json
        git commit --no-verify -m "bump version to v${NEW_VERSION}"
        git push origin main
    
    - name: Output new version
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "âœ… Version bumped to v${NEW_VERSION}"
        echo "ðŸš€ Release workflow will trigger automatically" 