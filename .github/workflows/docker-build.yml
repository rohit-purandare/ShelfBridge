name: Build and Push Docker Image

on:
  push:
    branches:
      [
        main,
        'feature/*',
        'feat/*',
        'bugfix/*',
        'fix/*',
        'hotfix/*',
        'release/*',
      ]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: read
      packages: write
    # Skip Docker builds for non-functional commits (docs, chore, test, ci, style)
    # Skip version bump commits to avoid duplicate builds (tag push will build)
    # But ALWAYS build for tag pushes (releases) regardless of commit message
    if: ${{ github.event_name != 'push' ||
      startsWith(github.ref, 'refs/tags/') ||
      (!startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'chore:') &&
      !startsWith(github.event.head_commit.message, 'test:') &&
      !startsWith(github.event.head_commit.message, 'ci:') &&
      !startsWith(github.event.head_commit.message, 'style:') &&
      !startsWith(github.event.head_commit.message, 'bump version to v')) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=gha,scope=build-${{ github.ref_name }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # CRITICAL: Test the built image BEFORE pushing - FAILS BUILD IF BROKEN
      - name: Test Docker image native modules (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing Docker image native modules compatibility..."
          echo "‚ö†Ô∏è  BUILD WILL FAIL if native modules don't work - blocking push"

          # Get the first tag (usually the PR or branch tag)
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $TAG"

          # Test native modules in the container - this MUST succeed or build fails
          if docker run --rm \
            -e SHELFBRIDGE_USER_0_ID=test_user \
            -e SHELFBRIDGE_USER_0_ABS_URL=https://test.audiobookshelf.com \
            -e SHELFBRIDGE_USER_0_ABS_TOKEN=test_abs_token_1234567890 \
            -e SHELFBRIDGE_USER_0_HARDCOVER_TOKEN=test_hc_token_1234567890 \
            --entrypoint="" \
            $TAG \
            npm run test:native; then
            echo "‚úÖ Docker image native modules test passed - proceeding with database tests"
          else
            echo "‚ùå CRITICAL FAILURE: Native modules are broken in Docker image"
            echo "üö´ BLOCKING DEPLOYMENT - Fix required before merge/release"
            echo "üö´ IMAGE WILL NOT BE PUSHED TO REGISTRY"
            exit 1
          fi

      - name: Test Docker image better-sqlite3 functionality (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing better-sqlite3 database operations in Docker..."
          echo "‚ö†Ô∏è  This test would have caught the GLIBC issue"

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing database operations in image: $TAG"

          # Test comprehensive better-sqlite3 functionality
          if docker run --rm --entrypoint="" $TAG node -e "
            console.log('üîç Testing better-sqlite3 comprehensive functionality...');
            const db = require('better-sqlite3')(':memory:');
            
            // Test 1: Table creation
            db.exec('CREATE TABLE test_table (id INTEGER PRIMARY KEY, name TEXT, value REAL)');
            console.log('‚úÖ Table creation successful');
            
            // Test 2: Insert operations
            const insert = db.prepare('INSERT INTO test_table (name, value) VALUES (?, ?)');
            insert.run('test1', 123.45);
            insert.run('test2', 678.90);
            console.log('‚úÖ Insert operations successful');
            
            // Test 3: Query operations
            const rows = db.prepare('SELECT * FROM test_table ORDER BY id').all();
            if (rows.length !== 2 || rows[0].name !== 'test1') {
              throw new Error('Query verification failed');
            }
            console.log('‚úÖ Query operations successful');
            
            // Test 4: Transaction support
            const transaction = db.transaction(() => {
              insert.run('test3', 999.99);
              insert.run('test4', 111.11);
            });
            transaction();
            const count = db.prepare('SELECT COUNT(*) as count FROM test_table').get().count;
            if (count !== 4) {
              throw new Error('Transaction test failed');
            }
            console.log('‚úÖ Transaction support successful');
            
            // Test 5: File database operations
            const fileDb = require('better-sqlite3')('/tmp/test-file.db');
            fileDb.exec('CREATE TABLE file_test (id INTEGER)');
            fileDb.exec('INSERT INTO file_test (id) VALUES (1)');
            const fileCount = fileDb.prepare('SELECT COUNT(*) as count FROM file_test').get().count;
            fileDb.close();
            if (fileCount !== 1) {
              throw new Error('File database test failed');
            }
            console.log('‚úÖ File database operations successful');
            
            db.close();
            console.log('üéâ ALL better-sqlite3 tests passed - database is fully functional!');
          "; then
            echo "‚úÖ better-sqlite3 comprehensive testing passed"
          else
            echo "‚ùå CRITICAL FAILURE: better-sqlite3 database operations failed"
            echo "üö® This indicates a GLIBC, musl, or native module compilation issue"
            echo "üö´ BLOCKING DEPLOYMENT - Database functionality is broken"
            exit 1
          fi

      - name: Test Docker image application startup (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing full application startup in Docker..."
          echo "‚ö†Ô∏è  Verifying ShelfBridge can initialize without crashes"

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing application startup in image: $TAG"

          # Test application version and help commands
          if docker run --rm --entrypoint="" $TAG node src/main.js --version; then
            echo "‚úÖ Application version command passed"
          else
            echo "‚ùå CRITICAL FAILURE: Application version command failed"
            echo "üö´ BLOCKING DEPLOYMENT - Basic app functionality broken"
            exit 1
          fi

          if docker run --rm --entrypoint="" $TAG node src/main.js --help >/dev/null 2>&1; then
            echo "‚úÖ Application help command passed"
          else
            echo "‚ùå CRITICAL FAILURE: Application help command failed"
            echo "üö´ BLOCKING DEPLOYMENT - Basic app functionality broken"
            exit 1
          fi

          echo "‚úÖ Application startup tests passed"

      - name: Test Docker image configuration validation (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing configuration validation in Docker..."
          echo "‚ö†Ô∏è  Ensuring config system works with database"

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing configuration in image: $TAG"

          # Test configuration validation with environment variables
          if docker run --rm \
            -e SHELFBRIDGE_USER_0_ID=test_user \
            -e SHELFBRIDGE_USER_0_ABS_URL=https://test.audiobookshelf.com \
            -e SHELFBRIDGE_USER_0_ABS_TOKEN=test_abs_token_1234567890 \
            -e SHELFBRIDGE_USER_0_HARDCOVER_TOKEN=test_hc_token_1234567890 \
            --entrypoint="" \
            $TAG \
            node src/main.js validate >/dev/null 2>&1; then
            echo "‚úÖ Configuration validation tests passed"
          else
            echo "‚ùå CRITICAL FAILURE: Configuration validation failed"
            echo "üö´ BLOCKING DEPLOYMENT - Config system broken"
            exit 1
          fi

      - name: Test Docker image health check (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing Docker health check functionality..."
          echo "‚ö†Ô∏è  Verifying built-in health checks work correctly"

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing health check in image: $TAG"

          # Test the health check command that's defined in Dockerfile
          if docker run --rm --entrypoint="" $TAG node -e "
            try {
              const db = require('better-sqlite3')(':memory:');
              db.exec('CREATE TABLE health_check (id INTEGER PRIMARY KEY, timestamp TEXT)');
              const stmt = db.prepare('INSERT INTO health_check (timestamp) VALUES (?)');
              stmt.run(new Date().toISOString());
              const count = db.prepare('SELECT COUNT(*) as count FROM health_check').get().count;
              if (count !== 1) throw new Error('Health check failed');
              db.close();
              console.log('‚úÖ Health check passed');
            } catch (e) {
              console.error('‚ùå Health check failed:', e.message);
              process.exit(1);
            }
          "; then
            echo "‚úÖ Health check functionality verified"
          else
            echo "‚ùå CRITICAL FAILURE: Health check is broken"
            echo "üö´ BLOCKING DEPLOYMENT - Health monitoring will fail"
            exit 1
          fi

      - name: Test Docker image cache functionality (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing cache/database functionality in Docker..."
          echo "‚ö†Ô∏è  Verifying BookCache can initialize and operate"

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing cache functionality in image: $TAG"

          # Test cache functionality with proper environment
          if docker run --rm \
            -e SHELFBRIDGE_USER_0_ID=test_user \
            -e SHELFBRIDGE_USER_0_ABS_URL=https://test.audiobookshelf.com \
            -e SHELFBRIDGE_USER_0_ABS_TOKEN=test_abs_token_1234567890 \
            -e SHELFBRIDGE_USER_0_HARDCOVER_TOKEN=test_hc_token_1234567890 \
            --entrypoint="" \
            $TAG \
            npm run cache -- --show >/dev/null 2>&1; then
            echo "‚úÖ Cache functionality tests passed"
          else
            echo "‚ùå CRITICAL FAILURE: Cache functionality is broken"
            echo "üö´ BLOCKING DEPLOYMENT - Database operations will fail"
            exit 1
          fi

      - name: Comprehensive Docker image validation summary
        run: |
          echo "üéâ ALL CRITICAL DOCKER TESTS PASSED!"
          echo ""
          echo "‚úÖ Tests completed successfully:"
          echo "  ‚Ä¢ Native modules compatibility"
          echo "  ‚Ä¢ better-sqlite3 database operations (GLIBC/musl compatibility)"
          echo "  ‚Ä¢ Application startup and basic functionality"
          echo "  ‚Ä¢ Configuration validation and environment handling"
          echo "  ‚Ä¢ Health check functionality"
          echo "  ‚Ä¢ Cache/database initialization and operations"
          echo ""
          echo "üöÄ Docker image is verified and ready for deployment"
          echo "üîí These tests prevent broken releases like GLIBC compatibility issues"

      # Only push if ALL tests pass - this ensures no broken images reach users
      - name: Push Docker image to registry
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=gha,scope=build-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build
            type=gha,mode=max,scope=build-${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
