# Docker Build Workflow
# Purpose: Build and publish multi-architecture Docker images
# Triggers: Branch pushes (filtered by paths), Pull requests, Workflow calls from releases
# Features: Multi-arch builds (amd64/arm64), GitHub Container Registry publishing, build attestations
name: Docker Build

on:
  push:
    branches: [
        main,
        'feature/*',
        'feat/*',
        'bugfix/*',
        'fix/*',
        'hotfix/*',
        'release/*',
        'ci/*',
        'chore/*', # Maintenance tasks
        'docs/*', # Documentation updates
        'test/*', # Test-related changes
        'refactor/*', # Code refactoring
        'perf/*', # Performance improvements
        'style/*', # Code style changes
        'build/*', # Build system changes
        'dev/*', # Development branches
        'experiment/*', # Experimental features
        'poc/*', # Proof of concept
        'demo/*', # Demo branches
        'staging/*', # Staging branches
        'patch/*', # Patch branches
      ]
    # Fallback: Also trigger on version tags in case workflow_call fails
    tags:
      - 'v*'
    paths:
      - 'Dockerfile'
      - 'docker-*.sh'
      - 'src/**'
      - 'package*.json'
      - 'release-please-config.json'
      - '.release-please-manifest.json'
      - '.github/workflows/docker-*.yml'
      - '!**.md'
      - '!docs/**'
      - '!wiki/**'
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build (branch, tag, or commit)'
        type: string
        default: ''
      is_release:
        description: 'Whether this is a release build'
        type: boolean
        default: false
    outputs:
      image-digest:
        description: 'Docker image digest'
        value: ${{ jobs.build.outputs.image-digest }}
      image-tags:
        description: 'Docker image tags'
        value: ${{ jobs.build.outputs.image-tags }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: docker-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    # Skip build for Release Please commits on main (handled by version-and-release.yml)
    # Always build for workflow_call, feature branches, tag pushes, and non-release commits
    if: |
      github.event_name == 'workflow_call' || 
      github.event_name == 'pull_request' ||
      startsWith(github.ref, 'refs/tags/') ||
      github.ref_name != 'main' ||
      !contains(github.event.head_commit.message, 'chore(main): release')

    outputs:
      image-digest: ${{ steps.build.outputs.digest || steps.build-push.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
          # Fetch tags for semver extraction when building releases
          fetch-depth: ${{ inputs.is_release && '0' || '1' }}

      - name: Check if Docker build is needed
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'docker-*.sh'
              - 'src/**'
              - 'package*.json'
              - 'release-please-config.json'
              - '.release-please-manifest.json'
              - '.github/workflows/docker-*.yml'
              - '!**.md'
              - '!docs/**'
              - '!wiki/**'

      - name: Skip message for docs-only changes
        if: steps.changes.outputs.docker != 'true'
        run: |
          echo "‚è≠Ô∏è Skipping Docker build - no relevant files changed"
          echo "This is expected for documentation-only changes"

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          tags: |
            # Branch builds: Clean branch names for testing (feature/auth -> feature-auth)
            type=ref,event=branch,suffix=-{{date 'YYYYMMDD-HHmmss'}},enable=${{ github.event_name == 'push' && github.ref_name != 'main' }}
            type=ref,event=branch,enable=${{ github.event_name == 'push' && github.ref_name != 'main' }}
            # PR builds: pr-123 format for testing
            type=ref,event=pr,prefix=pr-
            # Main branch: SHA-based tags for tracking
            type=sha,prefix={{branch}}-,enable=${{ github.ref_name == 'main' }}
            # Release versioning: Full semver support
            type=semver,pattern=v{{version}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{version}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern=v{{major}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') }}
            # Latest tag: Only for releases and main
            type=raw,value=latest,enable=${{ inputs.is_release || (github.ref_name == 'main' && github.event_name == 'push') }}
          flavor: |
            # Clean up branch names: replace '/' with '-', remove special chars
            suffix=
            prefix=

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (PR validation)
        if: github.event_name == 'pull_request'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-pr
            type=gha,scope=build-pr-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build-pr
            type=gha,mode=max,scope=build-pr-${{ github.ref_name }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      - name: Build and push Docker image (multi-arch)
        if: github.event_name != 'pull_request' && steps.changes.outputs.docker == 'true'
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-multiarch
            type=gha,scope=build-multiarch-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build-multiarch
            type=gha,mode=max,scope=build-multiarch-${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      - name: Basic image validation (PRs)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Running basic Docker image validation..."

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Validating image: $TAG"

          if docker run --rm --entrypoint="" $TAG node --version; then
            echo "‚úÖ Node.js runtime available"
          else
            echo "‚ùå CRITICAL FAILURE: Node.js runtime not available"
            exit 1
          fi

          if docker run --rm --entrypoint="" $TAG ls src/main.js >/dev/null 2>&1; then
            echo "‚úÖ Main entry point exists"
          else
            echo "‚ùå CRITICAL FAILURE: Main entry point missing"
            exit 1
          fi

          echo "‚úÖ Basic image validation passed"

      - name: Verify published images (non-PR)
        if: github.event_name != 'pull_request' && steps.changes.outputs.docker == 'true'
        run: |
          echo "üîç Verifying published Docker images..."
          echo "‚è≥ Waiting 10 seconds for registry propagation..."
          sleep 10

          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Verifying published image: $tag"
              if docker pull $tag >/dev/null 2>&1; then
                echo "‚úÖ Successfully verified: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Could not pull published image: $tag"
                exit 1
              fi

              if docker run --rm --entrypoint="" $tag node --version >/dev/null 2>&1; then
                echo "‚úÖ Smoke test passed for: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Smoke test failed for: $tag"
                exit 1
              fi
            fi
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Generate image attestation
        if: github.event_name != 'pull_request' && steps.changes.outputs.docker == 'true' && (inputs.is_release || github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: Display build results
        if: always()
        run: |
          echo "üèóÔ∏è Docker Build Summary"
          echo "======================="
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Is Release: ${{ inputs.is_release || 'false' }}"
          echo ""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üîç PR Build - Image built locally for testing"
            echo "Tags created (local only):"
          elif [ "${{ steps.changes.outputs.docker }}" = "true" ]; then
            echo "‚úÖ Multi-arch images published to registry:"
          else
            echo "‚è≠Ô∏è Docker build skipped - no relevant changes"
          fi

          if [ -n "${{ steps.meta.outputs.tags }}" ]; then
            echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                echo "  ‚Ä¢ $tag"
              fi
            done
          fi

          echo ""
          if [ "${{ inputs.is_release }}" = "true" ]; then
            echo "üöÄ Release build: Tagged with version numbers and 'latest'"
          elif [ "${{ github.ref_name }}" != "main" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "üß™ Branch build: Use for testing with branch-specific tag"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üîç PR build: Built locally for validation only"
          fi
