name: Docker Build

on:
  push:
    branches:
      [
        main,
        'feature/*',
        'feat/*',
        'bugfix/*',
        'fix/*',
        'hotfix/*',
        'release/*',
        'ci/*',
      ]
    # Remove tags trigger to avoid duplicate builds during releases
    # Tags will be handled via workflow_call from version-and-release.yml
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build (branch, tag, or commit)'
        type: string
        default: ''
      is_release:
        description: 'Whether this is a release build'
        type: boolean
        default: false
    outputs:
      image-digest:
        description: 'Docker image digest'
        value: ${{ jobs.build.outputs.image-digest }}
      image-tags:
        description: 'Docker image tags'
        value: ${{ jobs.build.outputs.image-tags }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: docker-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    # Skip build for Release Please commits on main (handled by version-and-release.yml)
    # Always build for workflow_call, feature branches, and non-release commits
    if: |
      github.event_name == 'workflow_call' || 
      github.event_name == 'pull_request' ||
      github.ref_name != 'main' ||
      !contains(github.event.head_commit.message, 'chore(main): release')

    outputs:
      image-digest: ${{ steps.build.outputs.digest || steps.build-push.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
          # Fetch tags for semver extraction when building releases
          fetch-depth: ${{ inputs.is_release && '0' || '1' }}
          fetch-tags: ${{ inputs.is_release }}

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Debug git context (for releases only)
        if: inputs.is_release
        run: |
          echo "üîç Debug git context for release tagging:"
          echo "Current ref: ${{ inputs.ref || github.ref }}"
          echo "Git HEAD: $(git rev-parse HEAD)"
          echo "Git tags at HEAD: $(git tag --points-at HEAD || echo 'none')"
          echo "All recent tags: $(git tag -l --sort=-version:refname | head -5 || echo 'none')"
          echo "Git describe: $(git describe --tags --exact-match HEAD 2>/dev/null || echo 'not a tagged commit')"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') || startsWith(inputs.ref, 'v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') || startsWith(inputs.ref, 'v') }}
            type=semver,pattern={{major}},enable=${{ inputs.is_release || startsWith(github.ref, 'refs/tags/') || startsWith(inputs.ref, 'v') }}
          flavor: |
            latest=false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (PR validation)
        if: github.event_name == 'pull_request'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-pr
            type=gha,scope=build-pr-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build-pr
            type=gha,mode=max,scope=build-pr-${{ github.ref_name }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      - name: Build and push Docker image (multi-arch)
        if: github.event_name != 'pull_request'
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-multiarch
            type=gha,scope=build-multiarch-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build-multiarch
            type=gha,mode=max,scope=build-multiarch-${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      - name: Basic image validation (PRs)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Running basic Docker image validation..."

          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Validating image: $TAG"

          if docker run --rm --entrypoint="" $TAG node --version; then
            echo "‚úÖ Node.js runtime available"
          else
            echo "‚ùå CRITICAL FAILURE: Node.js runtime not available"
            exit 1
          fi

          if docker run --rm --entrypoint="" $TAG ls src/main.js >/dev/null 2>&1; then
            echo "‚úÖ Main entry point exists"
          else
            echo "‚ùå CRITICAL FAILURE: Main entry point missing"
            exit 1
          fi

          echo "‚úÖ Basic image validation passed"

      - name: Debug Docker tags (for releases only)
        if: inputs.is_release
        run: |
          echo "üè∑Ô∏è  Generated Docker tags for release:"
          echo "${{ steps.meta.outputs.tags }}"

      - name: Verify published images (non-PR)
        if: github.event_name != 'pull_request'
        run: |
          echo "üîç Verifying published Docker images..."

          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Verifying published image: $tag"
              if docker pull $tag >/dev/null 2>&1; then
                echo "‚úÖ Successfully verified: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Could not pull published image: $tag"
                exit 1
              fi

              if docker run --rm --entrypoint="" $tag node --version >/dev/null 2>&1; then
                echo "‚úÖ Smoke test passed for: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Smoke test failed for: $tag"
                exit 1
              fi
            fi
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Generate image attestation
        if: github.event_name != 'pull_request' && (inputs.is_release || github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true
