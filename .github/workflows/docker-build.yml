name: Build and Push Docker Image

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
    # Skip Docker builds for non-functional commits (docs, chore, test, ci, style)
    # But ALWAYS build for tag pushes (releases) regardless of commit message
    if: ${{ github.event_name != 'push' ||
      startsWith(github.ref, 'refs/tags/') ||
      (!startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'chore:') &&
      !startsWith(github.event.head_commit.message, 'test:') &&
      !startsWith(github.event.head_commit.message, 'ci:') &&
      !startsWith(github.event.head_commit.message, 'style:')) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}:buildcache
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # CRITICAL: Test the built image BEFORE pushing - FAILS BUILD IF BROKEN
      - name: Test Docker image native modules (CRITICAL)
        run: |
          echo "üß™ CRITICAL: Testing Docker image native modules compatibility..."
          echo "‚ö†Ô∏è  BUILD WILL FAIL if native modules don't work - blocking push"

          # Get the first tag (usually the PR or branch tag)
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $TAG"

          # Test native modules in the container - this MUST succeed or build fails
          if ! docker run --rm \
            -e SHELFBRIDGE_USER_0_ID=test_user \
            -e SHELFBRIDGE_USER_0_ABS_URL=https://test.audiobookshelf.com \
            -e SHELFBRIDGE_USER_0_ABS_TOKEN=test_abs_token_1234567890 \
            -e SHELFBRIDGE_USER_0_HARDCOVER_TOKEN=test_hc_token_1234567890 \
            --entrypoint="" \
            $TAG \
            npm run test:native; then
            echo "‚ùå CRITICAL FAILURE: Native modules are broken in Docker image"
            echo "üö´ BLOCKING DEPLOYMENT - Fix required before merge/release"
            echo "üö´ IMAGE WILL NOT BE PUSHED TO REGISTRY"
            exit 1
          fi

          echo "‚úÖ Docker image native modules test passed - proceeding with push"

      # Only push if all tests pass
      - name: Push Docker image to registry
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
