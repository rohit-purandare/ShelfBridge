# Continuous Integration
# Tests, linting, and Docker builds for pull requests and feature branches
name: CI

on:
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests across multiple Node.js versions
  test:
    name: Test (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for CI performance

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint
        if: matrix.node-version == '20.x'

      - name: Check formatting
        run: npm run format:check
        if: matrix.node-version == '20.x'

  # Build Docker image for testing (PRs and feature branches)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      actions: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for CI performance

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push test image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          load: true
          tags: |
            shelfbridge:test
            ghcr.io/rohit-purandare/shelfbridge:pr-${{ github.event.number }}
            ghcr.io/rohit-purandare/shelfbridge:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker image
        run: |
          echo "Testing Docker image functionality..."

          # Basic runtime test
          docker run --rm --entrypoint="" shelfbridge:test node --version

          # Check main entry point exists
          docker run --rm --entrypoint="" shelfbridge:test ls src/main.js

          # Quick smoke test of application
          docker run --rm --entrypoint="" shelfbridge:test node -e "console.log('Docker build test passed')"

          echo "‚úÖ Docker image test completed successfully"

      - name: Display test image info
        run: |
          echo "üê≥ Test images published:"
          echo "  - ghcr.io/rohit-purandare/shelfbridge:pr-${{ github.event.number }}"
          echo "  - ghcr.io/rohit-purandare/shelfbridge:${{ github.sha }}"
          echo ""
          echo "üìã Usage:"
          echo "  docker pull ghcr.io/rohit-purandare/shelfbridge:pr-${{ github.event.number }}"
          echo "  docker run ghcr.io/rohit-purandare/shelfbridge:pr-${{ github.event.number }}"

  # Security and code quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for CI performance

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        run: |
          # Look for actual hardcoded secrets, not just the words token/key/etc
          # Check for quoted strings that look like API tokens (32+ chars, alphanumeric)
          if grep -r -E "(password|secret|token|key)\s*[:=]\s*['\"][a-zA-Z0-9]{32,}['\"]" src/ --include="*.js" > /dev/null; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found:"
            grep -r -E "(password|secret|token|key)\s*[:=]\s*['\"][a-zA-Z0-9]{32,}['\"]" src/ --include="*.js" || true
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets detected"
