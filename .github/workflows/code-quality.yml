name: Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint src/ --ext .js --max-warnings 0
        continue-on-error: false

      - name: Check for debug statements
        run: |
          echo "Checking for debug statements..."
          # Check for console.debug, console.trace, debugger statements
          DEBUG_COUNT=$(grep -r "console\.debug\|console\.trace\|debugger" src/ --exclude-dir=node_modules | wc -l || echo "0")
          if [ "$DEBUG_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $DEBUG_COUNT debug statements:"
            grep -r "console\.debug\|console\.trace\|debugger" src/ --exclude-dir=node_modules || true
            echo "üí° Remove debug statements before production"
          else
            echo "‚úÖ No debug statements found"
          fi

      - name: Check for TODO comments
        run: |
          echo "Checking for TODO comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX" src/ --exclude-dir=node_modules | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments:"
            grep -r "TODO\|FIXME\|XXX" src/ --exclude-dir=node_modules || true
            echo "üí° Consider addressing these before release"
          else
            echo "‚úÖ No TODO comments found"
          fi

      - name: Check dependencies
        run: |
          echo "Running dependency security audit..."
          npm audit --audit-level=high || {
            echo "‚ö†Ô∏è  High-severity vulnerabilities found"
            echo "üí° Run 'npm audit fix' to resolve automatically fixable issues"
            exit 1
          }
          echo "‚úÖ No high-severity vulnerabilities found"

      - name: Check package.json scripts
        run: |
          echo "Validating package.json scripts..."
          node -e "
            const pkg = require('./package.json');
            const required = ['start', 'sync', 'test', 'config', 'cache'];
            const missing = required.filter(script => !pkg.scripts[script]);
            if (missing.length > 0) {
              console.log('‚ùå Missing required scripts:', missing.join(', '));
              process.exit(1);
            }
            console.log('‚úÖ All required scripts present');
          "

      - name: Validate configuration example
        run: |
          echo "Validating config example file..."
          if [ -f "config/config.yaml.example" ]; then
            echo "‚úÖ config.yaml.example exists"
            # Check if it's valid YAML
            node -e "
              const yaml = require('js-yaml');
              const fs = require('fs');
              try {
                yaml.load(fs.readFileSync('config/config.yaml.example', 'utf8'));
                console.log('‚úÖ config.yaml.example is valid YAML');
              } catch (e) {
                console.log('‚ùå config.yaml.example is invalid YAML:', e.message);
                process.exit(1);
              }
            "
          else
            echo "‚ùå config/config.yaml.example not found"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "üîí Running dependency security audit..."
          npm audit --audit-level=high || {
            echo "‚ö†Ô∏è  High-severity vulnerabilities found"
            echo "üí° Run 'npm audit fix' to resolve automatically fixable issues"
            exit 1
          }
          echo "‚úÖ No high-severity vulnerabilities found"

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Checking for potential hardcoded secrets..."
          SECRET_COUNT=$(grep -r "password\|secret\|token\|key" src/ --include="*.js" | grep -v "// " | wc -l || echo "0")
          if [ "$SECRET_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $SECRET_COUNT potential secret references:"
            grep -r "password\|secret\|token\|key" src/ --include="*.js" | grep -v "// " || true
            echo "üí° Review these for hardcoded credentials"
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi
