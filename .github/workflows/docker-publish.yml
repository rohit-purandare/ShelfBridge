name: Docker Publish

on:
  workflow_run:
    workflows: ['Docker Test']
    types:
      - completed
    branches:
      [
        main,
        'feature/*',
        'feat/*',
        'bugfix/*',
        'fix/*',
        'hotfix/*',
        'release/*',
        'ci/*',
      ]
  workflow_call:
    inputs:
      image-tags:
        description: 'Docker image tags to publish'
        required: true
        type: string
      image-labels:
        description: 'Docker image labels'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
    # Only run if the Docker Test workflow succeeded (workflow_run events don't include PRs)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_call' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find Docker Build workflow run
        if: github.event_name == 'workflow_run'
        id: find-build-run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Finding Docker Build workflow run for this commit..."

          # Get the commit SHA from the triggering workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Looking for Docker Build run for commit: $COMMIT_SHA"

          # Find the Docker Build workflow run for this commit
          BUILD_RUN_ID=$(gh api \
            "repos/${{ github.repository }}/actions/workflows/docker-build.yml/runs" \
            --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\") | .id" \
            | head -1)

          if [ -z "$BUILD_RUN_ID" ]; then
            echo "‚ùå Could not find Docker Build run for commit $COMMIT_SHA"
            exit 1
          fi

          echo "‚úÖ Found Docker Build run ID: $BUILD_RUN_ID"
          echo "build-run-id=$BUILD_RUN_ID" >> $GITHUB_OUTPUT

      - name: Download image artifact
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.find-build-run.outputs.build-run-id }}

      - name: Load and retag Docker image
        if: github.event_name == 'workflow_run'
        run: |
          echo "Loading Docker image from artifact..."
          docker load < /tmp/docker-image.tar

          # Get the loaded image tag
          ORIGINAL_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -E "ghcr.io.*shelfbridge" | head -n1 | tr -s ' ' | cut -d' ' -f1)
          echo "Loaded image: $ORIGINAL_TAG"

          # Retag with all the metadata tags for multi-platform push
          echo "Retagging for multi-platform publish..."
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Tagging as: $tag"
              docker tag $ORIGINAL_TAG $tag
            fi
          done <<< "${{ steps.meta.outputs.tags }}"

      # For PRs, we already built the image in docker-build, so we can build and push directly
      - name: Build and push Docker image (multi-platform)
        id: publish
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=gha,scope=build-${{ github.ref_name }}
          cache-to: |
            type=gha,mode=max,scope=build
            type=gha,mode=max,scope=build-${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Verify published images
        run: |
          echo "üîç Verifying published Docker images..."

          # Check each published tag
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Verifying published image: $tag"
              
              # Pull the published image to verify it exists
              if docker pull $tag >/dev/null 2>&1; then
                echo "‚úÖ Successfully verified: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Could not pull published image: $tag"
                exit 1
              fi
              
              # Quick smoke test on the published image
              if docker run --rm --entrypoint="" $tag node --version >/dev/null 2>&1; then
                echo "‚úÖ Smoke test passed for: $tag"
              else
                echo "‚ùå CRITICAL FAILURE: Smoke test failed for: $tag"
                exit 1
              fi
            fi
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Generate image attestation
        uses: actions/attest-build-provenance@v1
        if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/')
        id: attestation
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          subject-digest: ${{ steps.publish.outputs.digest }}
          push-to-registry: true

      - name: Cleanup artifacts
        if: always()
        run: |
          echo "üßπ Cleaning up temporary artifacts..."
          # Remove the downloaded artifact
          rm -f /tmp/docker-image.tar

          # Remove any locally tagged images to save space
          docker images --format "table {{.Repository}}:{{.Tag}}" | grep -E "ghcr.io.*shelfbridge" | while read -r image; do
            if [ -n "$image" ] && [ "$image" != "REPOSITORY:TAG" ]; then
              echo "Removing local image: $image"
              docker rmi $image >/dev/null 2>&1 || true
            fi
          done

      - name: Publish success notification
        run: |
          echo "üéâ DOCKER IMAGES PUBLISHED SUCCESSFULLY!"
          echo ""
          echo "üì¶ Published images:"
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "  ‚Ä¢ $tag"
            fi
          done <<< "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "üöÄ Images are now available for immediate use"
          echo "üîí All images passed comprehensive testing before publication"

          # For releases, provide additional information
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo ""
            echo "üè∑Ô∏è  RELEASE DEPLOYMENT COMPLETE"
            echo "üìã Release tag: ${{ github.ref_name }}"
            echo "üåê Available at: https://github.com/${{ github.repository }}/pkgs/container/shelfbridge"
          fi
