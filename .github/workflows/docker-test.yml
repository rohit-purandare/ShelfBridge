# Docker Test Workflow
# Purpose: Comprehensive runtime testing of Docker images
# Triggers: After Docker Build completion, Pull requests (with paths filter), Workflow calls
# Tests: Native modules, SQLite/better-sqlite3, application startup, configuration, health checks
name: Docker Test

on:
  workflow_run:
    workflows: ['Docker Build']
    types: [completed]
    branches: [
        main,
        'feature/*',
        'feat/*',
        'bugfix/*',
        'fix/*',
        'hotfix/*',
        'release/*',
        'ci/*',
        'chore/*', # Maintenance tasks
        'docs/*', # Documentation updates
        'test/*', # Test-related changes
        'refactor/*', # Code refactoring
        'perf/*', # Performance improvements
        'style/*', # Code style changes
        'build/*', # Build system changes
        'dev/*', # Development branches
        'experiment/*', # Experimental features
        'poc/*', # Proof of concept
        'demo/*', # Demo branches
        'staging/*', # Staging branches
        'patch/*', # Patch branches
      ]
    # Include pull request branches to test PR images built by docker-build.yml
  # Remove direct PR trigger - tests will run via workflow_run after docker-build completes
  # This eliminates duplicate Docker builds for PRs
  workflow_call:
    inputs:
      image-tags:
        description: 'Docker image tags to test'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

concurrency:
  group: docker-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
    # Only run if the Docker Build workflow succeeded, or workflow_call
    if: ${{ github.event_name == 'workflow_call' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
      skip-pull: ${{ steps.set-image-tag.outputs.skip-pull }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag to test
        id: set-image-tag
        run: |
          echo "üîç Determining image tag to test..."

          # Lowercase repository for GHCR compatibility
          LOWER_REPO=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')

          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # For workflow_run, determine image tag based on the source event type
            SHORT_SHA=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)
            
            # Check if this originated from a PR by examining the event
            if [ "${{ github.event.workflow_run.event }}" = "pull_request" ]; then
              # This is from a PR - extract PR number from refs/pull/{number}/merge
              REF="${{ github.event.workflow_run.pull_requests[0].number }}"
              if [ -n "$REF" ] && [ "$REF" != "null" ]; then
                IMAGE_TAG="ghcr.io/${LOWER_REPO}:pr-${REF}"
                echo "Testing PR image: ${IMAGE_TAG}"
                echo "skip-pull=true" >> $GITHUB_OUTPUT
              else
                # Fallback: try to extract from head_branch if it matches PR format
                HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
                if [[ "$HEAD_BRANCH" =~ ^[0-9]+/merge$ ]]; then
                  PR_NUMBER=$(echo "$HEAD_BRANCH" | cut -d'/' -f1)
                  IMAGE_TAG="ghcr.io/${LOWER_REPO}:pr-${PR_NUMBER}"
                  echo "Testing PR image (fallback): ${IMAGE_TAG}"
                  echo "skip-pull=true" >> $GITHUB_OUTPUT
                else
                  echo "‚ùå Could not determine PR number for pull request event"
                  exit 1
                fi
              fi
            else
              # This is a regular branch push
              HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
              if [ "$HEAD_BRANCH" = "main" ]; then
                # Main branch uses main-<sha> format
                IMAGE_TAG="ghcr.io/${LOWER_REPO}:main-${SHORT_SHA}"
              else
                # Feature branches use branch name format (cleaned)
                CLEAN_BRANCH=$(echo "$HEAD_BRANCH" | sed 's/[^a-zA-Z0-9._-]/-/g')
                IMAGE_TAG="ghcr.io/${LOWER_REPO}:${CLEAN_BRANCH}"
              fi
              echo "Testing branch image: ${IMAGE_TAG}"
              echo "skip-pull=false" >> $GITHUB_OUTPUT
            fi
            
            echo "Workflow run head SHA: ${{ github.event.workflow_run.head_sha }}"
            echo "Current context SHA: ${{ github.sha }}"
            echo "Branch: ${{ github.event.workflow_run.head_branch }}"
            
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            # For workflow_call, use the provided tags
            IMAGE_TAG=$(echo "${{ inputs.image-tags }}" | head -n1)
            echo "Testing provided image: ${IMAGE_TAG}"
            echo "skip-pull=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi

          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Final image tag: ${IMAGE_TAG}"

      - name: Wait for image availability (workflow_run)
        if: github.event_name == 'workflow_run'
        run: |
          echo "‚è≥ Waiting for Docker image to be available..."
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image-tag }}"
          echo "Image: $IMAGE_TAG"

          # For PRs, images are built locally in docker-build.yml and not pushed
          # Check if this is a PR by examining the original event type
          if [ "${{ github.event.workflow_run.event }}" = "pull_request" ]; then
            echo "üîÑ This is a PR - image was built locally and validated in docker-build.yml"
            echo "‚ö†Ô∏è  For PR testing, we need to rebuild the image locally since it's not pushed to registry"
            
            # Build the image locally using the same context as the original build
            echo "üî® Building image locally for testing..."
            docker build -t "$IMAGE_TAG" .
            echo "‚úÖ Image built locally: $IMAGE_TAG"
          else
            # For regular branches, wait for the published image
            echo "‚è≥ Waiting for published image to be available..."
            max_attempts=30
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              if docker pull "$IMAGE_TAG" >/dev/null 2>&1; then
                echo "‚úÖ Image is available: $IMAGE_TAG"
                break
              fi
              
              attempt=$((attempt + 1))
              echo "‚è≥ Attempt $attempt/$max_attempts - Image not yet available, waiting 10 seconds..."
              sleep 10
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Image not available after $max_attempts attempts: $IMAGE_TAG"
              exit 1
            fi
          fi

  validate:
    needs: prepare
    uses: ./.github/workflows/reusable-docker-validation.yml
    with:
      image-tag: ${{ needs.prepare.outputs.image-tag }}
      registry: ghcr.io
      test-environment: 'docker-test'
      skip-pull: ${{ needs.prepare.outputs.skip-pull == 'true' }}
    secrets:
      TEST_USER_ID: ${{ secrets.TEST_USER_ID }}
      TEST_ABS_URL: ${{ secrets.TEST_ABS_URL }}
      TEST_ABS_TOKEN: ${{ secrets.TEST_ABS_TOKEN }}
      TEST_HARDCOVER_TOKEN: ${{ secrets.TEST_HARDCOVER_TOKEN }}
