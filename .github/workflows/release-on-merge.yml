name: Create Release on Merge

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  create-release:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'Release:')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          NEW_VERSION=${{ steps.package_version.outputs.version }}
          if git tag -l | grep -q "^v${NEW_VERSION}$"; then
            echo "Tag v${NEW_VERSION} already exists"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${NEW_VERSION} does not exist, creating release"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release changelog
        if: steps.check_tag.outputs.skip == 'false'
        id: release_changelog
        run: |
          echo "Generating GitHub release changelog..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $LAST_TAG"
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Convert repository name to lowercase for Docker images
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          # Save changelog to file for multi-line output
          echo "## üìã Changes" > release_changelog.md
          echo "" >> release_changelog.md
          echo "$CHANGELOG" >> release_changelog.md
          echo "" >> release_changelog.md
          echo "## üê≥ Docker Images" >> release_changelog.md
          echo "" >> release_changelog.md
          echo "- \`ghcr.io/${REPO_LOWERCASE}:${{ steps.package_version.outputs.version }}\`" >> release_changelog.md
          echo "- \`ghcr.io/${REPO_LOWERCASE}:latest\`" >> release_changelog.md
          echo "" >> release_changelog.md
          echo "## üöÄ Installation" >> release_changelog.md
          echo "" >> release_changelog.md
          echo "\`\`\`bash" >> release_changelog.md
          echo "# Docker" >> release_changelog.md
          echo "docker pull ghcr.io/${REPO_LOWERCASE}:${{ steps.package_version.outputs.version }}" >> release_changelog.md
          echo "" >> release_changelog.md
          echo "# Node.js" >> release_changelog.md
          echo "npm install -g shelfbridge@${{ steps.package_version.outputs.version }}" >> release_changelog.md
          echo "\`\`\`" >> release_changelog.md

          echo "release_changelog_file=release_changelog.md" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          NEW_VERSION=${{ steps.package_version.outputs.version }}
          echo "Creating and pushing tag v${NEW_VERSION}..."
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          echo "‚úÖ Tag v${NEW_VERSION} pushed successfully"

      - name: Create Release
        if: steps.check_tag.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: üöÄ ShelfBridge v${{ steps.package_version.outputs.version }}
          body_path: ${{ steps.release_changelog.outputs.release_changelog_file }}
          draft: false
          prerelease: false

      - name: Clean up release branch
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          # Delete the release branch that was merged
          RELEASE_BRANCH="${{ github.event.pull_request.head.ref }}"
          if [[ "$RELEASE_BRANCH" == release/* ]]; then
            echo "Cleaning up release branch: $RELEASE_BRANCH"
            git push origin --delete "$RELEASE_BRANCH" || echo "Branch already deleted"
          fi

      - name: Success message
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          echo "‚úÖ Release v${{ steps.package_version.outputs.version }} created successfully"
          echo "üè∑Ô∏è Tag v${{ steps.package_version.outputs.version }} pushed"
          echo "üì¶ Release available at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.package_version.outputs.version }}"
          echo "üê≥ Docker images will be built automatically via docker-build workflow"
