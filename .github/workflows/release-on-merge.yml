name: Release on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get latest tag
        id: get_tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

      - name: Get version from package.json
        id: pkg_version
        run: |
          echo "version=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.pkg_version.outputs.version }}" >/dev/null 2>&1; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          LAST_TAG="${{ steps.get_tag.outputs.tag }}"
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $LAST_TAG"
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create tag and GitHub Release
        if: steps.check_tag.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.pkg_version.outputs.version }}
          name: Release v${{ steps.pkg_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Push tag
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          git tag v${{ steps.pkg_version.outputs.version }}
          git push origin v${{ steps.pkg_version.outputs.version }} 